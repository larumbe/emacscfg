#+TITLE: DotEmacs
#+AUTHOR: Adrian Larumbe

* code
** macros
#+BEGIN_SRC emacs-lisp
  (defmacro keybinding (f)
    `(lambda ()
       (interactive)
       ,f))
#+END_SRC
** functions
#+BEGIN_SRC emacs-lisp
(defun narrow-or-widen-dwim (p)
  "Widen if buffer is narrowed, narrow-dwim otherwise.
Dwim means: region, org-src-block, org-subtree, or
defun, whichever applies first. Narrowing to
org-src-block actually calls `org-edit-src-code'.
http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html

With prefix P, don't widen, just narrow even if buffer
is already narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
	((region-active-p)
	 (narrow-to-region (region-beginning)
			   (region-end)))
	((derived-mode-p 'org-mode)
	 ;; `org-edit-src-code' is not a real narrowing
	 ;; command. Remove this first conditional if
	 ;; you don't want it.
	 (cond ((ignore-errors (org-edit-src-code) t)
		(delete-other-windows))
	       ((ignore-errors (org-narrow-to-block) t))
	       (t (org-narrow-to-subtree))))
	((derived-mode-p 'latex-mode)
	 (LaTeX-narrow-to-environment))
	(t (narrow-to-defun))))
#+END_SRC
* basic customisation
#+BEGIN_SRC emacs-lisp
    ;;; easy package list access
  (global-set-key (kbd "C-x C-M-p") 'package-list-packages)

    ;;; new global prefix
  (global-unset-key (kbd "C-z"))

    ;;; appearance
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (setq inhibit-startup-message t)
  (column-number-mode t)

    ;;; quick window switching
  (global-set-key (kbd "C-z C-k") 'windmove-up)
  (global-set-key (kbd "C-z C-j") 'windmove-down)
  (global-set-key (kbd "C-z C-h") 'windmove-left)
  (global-set-key (kbd "C-z C-l") 'windmove-right)

    ;;; quick editing of config files
  (global-set-key (kbd "C-z .") (keybinding (find-file (concat default-directory "dotemacs.org") )))
  (global-set-key (kbd "C-z ,") (keybinding (dired default-directory)))

  ;; parenthesis
  (electric-pair-mode t)
  (show-paren-mode t)

    ;;; forward yanking
  (defun yank-pop-forwards (arg)
    (interactive "p")
    (yank-pop (- arg)))
  (global-set-key (kbd "C-M-y") 'yank-pop-forwards)

    ;;; bash deletion
  (global-unset-key (kbd "C-h"))
  (global-set-key (kbd "C-h") 'delete-backward-char)
  (global-set-key (kbd "C-w") 'backward-kill-word)

  ;; Help key bindings
  (global-set-key (kbd "C-q") 'help-command)
  (global-set-key (kbd "C-q C-c") 'describe-key-briefly)
  (global-set-key (kbd "C-q C-w") 'where-is)
  (global-set-key (kbd "C-q g") 'find-function)

  ;; vanilla keystrokes
  (global-set-key (kbd "C-M-]") 'eval-expression)
  (global-set-key (kbd "C-x C-k") 'kill-region)
  (global-set-key (kbd "C-z \\") 'pop-tag-mark)
  (global-set-key (kbd "C-x l") 'kill-whole-line)
  (global-set-key (kbd "C-z M-=") 'count-lines-page)
  (global-set-key (kbd "C-M-SPC") 'recenter-top-bottom)
  (global-set-key (kbd "C-q C-q") 'quoted-insert)

    ;;; switch to previous buffer
  (defun switch-to-previous-buffer ()
    "Goes to the most recent previous buffer"
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))
  (global-set-key (kbd "C-x p") 'switch-to-previous-buffer)

    ;;; repetition and deletion
  (global-set-key (kbd "C-.") 'repeat)
  (global-set-key (kbd "C-z C-z") 'repeat)
  (global-set-key (kbd "C-z SPC") 'delete-trailing-whitespace)
  (global-set-key (kbd "C-z C-SPC") 'delete-horizontal-space)
  (global-set-key (kbd "C-z RET") 'just-one-space)

  ;; the blinking cursor is nothing, but an annoyance
  (blink-cursor-mode -1)

  ;; other window scroll'
  (global-set-key (kbd "C-x P") 'mark-page)
  (global-set-key (kbd "C-x C") 'set-goal-column)
  (global-set-key (kbd "C-z C-n") 'scroll-other-window)
  (global-set-key (kbd "C-z C-p") 'scroll-other-window-down)

  ;; paragraph motion
  (global-set-key (kbd "M-p") 'backward-paragraph)
  (global-set-key (kbd "M-n") 'forward-paragraph)

  ;; better bindings for beginning and end of buffer
  (global-set-key (kbd "C-z C-,") 'beginning-of-buffer)
  (global-set-key (kbd "C-z C-.") 'end-of-buffer)

    ;;; straight to line
  (global-set-key (kbd "C-x C-j") 'goto-line)

    ;;; minibuffer
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; smooth scrolling
  (setq scroll-step 1)

    ;;; other window

    ;;; keep as fall-back combo for when CAPS+TAB is taken over by the minor mode
  (global-set-key (kbd "C-x C-x") 'other-window)
  (global-set-key (kbd "<C-tab>") 'other-window)
  (global-set-key (kbd "<C-M-tab>") (keybinding (other-window -1)))

    ;;; line truncation
  (global-set-key (kbd "C-z t") 'toggle-truncate-lines)

    ;;; replace region with yank
  (delete-selection-mode)

    ;;; killing and marking
  (global-set-key (kbd "C-x w") 'append-next-kill)

  ;; please assign C-x C-h

  ;;; fast buffer switch
  (global-set-key (kbd "C-x C-p") 'previous-buffer)
  (global-set-key (kbd "C-x C-n") 'next-buffer)

  (defun my:split-window-below-switch-point ()
    "Splits window and moves the point to save time"
    (interactive)
    (split-window-below)
    (other-window 1))
  (global-set-key (kbd "C-x C-y") 'my:split-window-below-switch-point)

  (defun my:split-window-right-switch-point ()
    "Splits window and moves the point to save time"
    (interactive)
    (split-window-horizontally)
    (other-window 1))
  (global-set-key (kbd "C-x y") 'my:split-window-right-switch-point)

  ;;; Shouldn't have to reach out long for this
  (global-set-key (kbd "C-x c") 'delete-other-windows)

  ;;; keyboard macros
  (global-set-key (kbd "C-x M-q") 'kbd-macro-query)

  ;;; frames
  (global-set-key (kbd "C-x o") 'other-frame)
  (global-set-key (kbd "C-z f") 'make-frame)

  ;;; screen size
  (global-set-key (kbd "C-z C-;") 'text-scale-decrease)
  (global-set-key (kbd "C-z C-'") 'text-scale-increase)

  ;; buffer list
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  ;;; backups
  (setq backup-by-copying t
	backup-directory-alist '(("." . (concat default-directory "backups")))
	delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t)

  ;;; winner mode configuration
  (winner-mode)
  (define-key winner-mode-map (kbd "C-z C-]") 'winner-undo)
  (define-key winner-mode-map (kbd "C-z C-\\") 'winner-redo)

  ;;; Don't ask for confirmation before killing an unmodified buffer
  (defun volatile-kill-buffer ()
    "Kill current buffer unconditionally."
    (interactive)
    (let ((buffer-modified-p nil))
      (kill-buffer (current-buffer))))
  (global-set-key (kbd "C-x k") 'volatile-kill-buffer)

  ;; No ask to kill buffer
  (setq buffer-offer-save nil)

  ;;; narrowing
  (global-set-key (kbd "C-z n") 'narrow-or-widen-dwim)

  ;;; files
  (global-set-key (kbd "C-z l") 'load-file)
  ;;; filling
  (global-set-key (kbd "C-z C-f") 'fill-region)

  ;;; dired
  (global-set-key (kbd "C-x C-d") 'wdired-change-to-wdired-mode)
  (global-set-key (kbd "M-\\")  (keybinding (dired default-directory)))
  (global-set-key (kbd "C-x /") (keybinding (dired "~/")))

  ;;; appearance
  (global-set-key (kbd "C-z M-l") 'load-theme)
  (load-theme 'deeper-blue t)
  (set-frame-font "Hack-14" nil t)

#+END_SRC

* helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :after (helm-config)
    :requires helm-config
    :preface
    (require 'helm-config)
    :bind
    (("C-l" . helm-command-prefix)
     ([remap execute-extended-command] . helm-M-x)
     ([remap find-file] . helm-find-files)
     ([remap switch-to-buffer] . helm-buffers-list)
     ("C-z C-e" . helm-M-x)
     :map helm-command-map
     ("g" . helm-ag)
     ("C-g" . helm-do-grep-ag)
     ("w" . helm-swoop)
     ("C-w" . helm-multi-swoop)
     ("y" . helm-all-mark-rings)
     ("M-p" . helm-package)
     ("u" . helm-unicode)
     :map helm-map
     ("C-w" . backward-kill-word)
     ("C-h" . backward-delete-char))
    :config
    (global-unset-key (kbd "C-x c"))
    (global-set-key (kbd "C-x c") 'delete-other-windows)
    :hook
    (after-init . helm-mode))
#+END_SRC
* org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :preface
    (require 'org-agenda)
    :init
    (progn
      (define-prefix-command 'org-prefix nil "Org: a(agenda), j(clock), c(capture), d(dired)"))
    :bind-keymap
    ("C-z o" . org-prefix)
    :bind
    (("C-z J" . org-clock-goto)
     :map org-mode-map
     ("<s-stab>" . org-global-cycle)
     ("C-c l" . org-store-link)
     ("C-c c" . org-capture)
     ("C-c ." . org-priority)
     ("C-c i" . org-iswitchb)
     ("C-c t" . org-time-stamp)
     ("C-c f" . org-metaright)
     ("C-c b" . org-metaleft)
     ("C-c n" . org-metadown)
     ("C-c p" . org-metaup)
     ("C-c '" . org-insert-todo-heading)
     ("M-p" . org-table-previous-field)
     ("M-n" . org-table-next-field)
     ("<C-tab>" . other-window)
     ("C-c s" . org-insert-todo-subheading)
     ("C-c C-," . org-promote-subtree)
     ("C-c C-." . org-demote-subtree)
     ("C-c e" . org-edit-src-code)
     :map org-agenda-mode-map
     ("C-c m" . org-agenda-month-view)
     ("C-c y" . org-agenda-year-view)
     :map org-src-mode-map
     ("C-c C-k" . nil)
     ("C-c e" . org-edit-src-exit)
     ("C-c k" . org-edit-src-abort)
     ("C-c e" . org-edit-src-exit)
     :map org-prefix
     ("a" . org-agenda)
     ("c" . org-capture)
     ("j" . org-clock-goto)
     ("d" . (lambda () (interactive) (dired "~/org"))))
    :custom
    (org-directory "~/org/")
    (org-log-done 'time)
    (org-default-notes-file "~/org/remember.org")
    (org-capture-templates '(
			     ("t" "Todo" entry (file+headline
						"" "Tasks") "* TODO %?\n %i %T\n")
			     ("e" "Emacs" entry (file
						 "~/org/emacs.org") "* TODO %?\n %i %T\n")
			     ("p" "Programming" entry (file+headline
						       "" "Programming") "* TODO %?\n %i")
			     ("r" "Reads" entry (file+headline
						 "" "Reads") "* TODO %?\n %i %T\n")
			     ("w" "Workflow" entry (file+headline
						    "" "Workflow") "* TODO %?\n %i %T\n")
			     ("j" "Journal" entry (file+datetree
						   "~/org/journal.org") "* TODO %?\n")

			     ("c" "Chinese" entry (file "~/org/projects/languages/chinwords.org")
			      "* %?\n Pinyin: \n Meaning: ")

			     ("b" "Bookmark" entry (file "~/org/bookmarks.org")
			      "* %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n" :empty-lines 1)
			     ))
    (org-clock-persist 'history)
    (org-deadline-warning-days 0)
    :config
    (org-clock-persistence-insinuate)
    :hook
    (org-mode yas-minor-mode))

#+END_SRC
* projectile
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :ensure t)

  (use-package projectile
    :ensure t
    :init
    (require 'helm-projectile)
    :hook
    (after-init . projectile-global-mode)
    :config
    (helm-projectile-on)  
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :custom
    (projectile-completion-system 'helm)
    (projectile-indexing-method 'alien)
    (projectile-switch-project-action 'projectile-dired)
    :bind
    (("C-z p" . helm-projectile-switch-project)
     ("C-z e" . helm-projectile-recentf)
     :map projectile-command-map
	  ("C-g" . projectile-grep)
	  ("s r" . projectile-ripgrep)))
#+END_SRC
* programming
** emacs-lisp

* appearance
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :init
    (load-theme 'solarized-dark t))
#+END_SRC
* shell
* windows
** motion mode
* version control
* programs
** browser
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-z C-o") 'browse-url)
#+END_SRC

* server
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC
