#+TITLE: DotEmacs
#+AUTHOR: Adrian Larumbe

* code
** macros
#+BEGIN_SRC emacs-lisp
  (defmacro keybinding (f)
    `(lambda ()
       (interactive)
       ,f))
#+END_SRC
** functions
#+BEGIN_SRC emacs-lisp
  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
    Dwim means: region, org-src-block, org-subtree, or
    defun, whichever applies first. Narrowing to
    org-src-block actually calls `org-edit-src-code'.
    http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html

    With prefix P, don't widen, just narrow even if buffer
    is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-edit-src-code) t)
                  (delete-other-windows))
                 ((ignore-errors (org-narrow-to-block) t))
                 (t (org-narrow-to-subtree))))
          ((derived-mode-p 'latex-mode)
           (LaTeX-narrow-to-environment))
          (t (narrow-to-defun))))

    ;;; Open scratch buffer
  (defun switch-to-temporary-buffer ()
    "Switches to scratch temporary buffer"
    (interactive)
    (pop-to-buffer "temp"))

  (defun kill-buffer-other-window ()
    "Kills buffer in the other window, make sure there are only two of them"
    (interactive)
    (other-window 1)
    (kill-buffer)
    (other-window 1)
    (delete-other-windows))
#+END_SRC
* basic
** defaults
 #+BEGIN_SRC emacs-lisp
     ;;; easy package list access
   (global-set-key (kbd "C-x C-M-p") 'package-list-packages)

     ;;; new global prefix
   (global-unset-key (kbd "C-z"))

     ;;; appearance
   (tool-bar-mode -1)
   (menu-bar-mode -1)
   (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
   (setq inhibit-startup-message t)
   (column-number-mode t)

     ;;; quick window switching
   (global-set-key (kbd "C-z C-k") 'windmove-up)
   (global-set-key (kbd "C-z C-j") 'windmove-down)
   (global-set-key (kbd "C-z C-h") 'windmove-left)
   (global-set-key (kbd "C-z C-l") 'windmove-right)

     ;;; quick editing of config files
   (global-set-key (kbd "C-z .") (keybinding (find-file (concat user-emacs-directory "dotemacs.org") )))
   (global-set-key (kbd "C-z ,") (keybinding (dired user-emacs-directory)))

   ;; parenthesis
   (electric-pair-mode t)
   (show-paren-mode t)

     ;;; forward yanking
   (defun yank-pop-forwards (arg)
     (interactive "p")
     (yank-pop (- arg)))
   (global-set-key (kbd "C-M-y") 'yank-pop-forwards)

     ;;; bash deletion
   (global-unset-key (kbd "C-h"))
   (global-set-key (kbd "C-h") 'delete-backward-char)
   (global-set-key (kbd "C-w") 'backward-kill-word)

   ;; Help key bindings
   (global-set-key (kbd "C-q") 'help-command)
   (global-set-key (kbd "C-q C-c") 'describe-key-briefly)
   (global-set-key (kbd "C-q C-w") 'where-is)
   (global-set-key (kbd "C-q g") 'find-function)

   ;; vanilla keystrokes
   (global-set-key (kbd "C-M-]") 'eval-expression)
   (global-set-key (kbd "C-x C-k") 'kill-region)
   (global-set-key (kbd "C-z \\") 'pop-tag-mark)
   (global-set-key (kbd "C-x l") 'kill-whole-line)
   (global-set-key (kbd "C-z M-=") 'count-lines-page)
   (global-set-key (kbd "C-M-SPC") 'recenter-top-bottom)
   (global-set-key (kbd "C-q C-q") 'quoted-insert)

     ;;; switch to previous buffer
   (defun switch-to-previous-buffer ()
     "Goes to the most recent previous buffer"
     (interactive)
     (switch-to-buffer (other-buffer (current-buffer) 1)))
   (global-set-key (kbd "C-x p") 'switch-to-previous-buffer)

     ;;; repetition and deletion
   (global-set-key (kbd "C-.") 'repeat)
   (global-set-key (kbd "C-z C-z") 'repeat)
   (global-set-key (kbd "C-z z") 'repeat-complex-command)
   (global-set-key (kbd "C-z SPC") 'delete-trailing-whitespace)
   (global-set-key (kbd "C-z C-SPC") 'delete-horizontal-space)
   (global-set-key (kbd "C-z RET") 'just-one-space)

   ;; the blinking cursor is nothing, but an annoyance
   (blink-cursor-mode -1)

   ;; other window scroll'
   (global-set-key (kbd "C-x P") 'mark-page)
   (global-set-key (kbd "C-x C") 'set-goal-column)
   (global-set-key (kbd "C-z C-n") 'scroll-other-window)
   (global-set-key (kbd "C-z C-p") 'scroll-other-window-down)

   ;; paragraph motion
   (global-set-key (kbd "M-p") 'backward-paragraph)
   (global-set-key (kbd "M-n") 'forward-paragraph)

   ;; better bindings for beginning and end of buffer
   (global-set-key (kbd "C-z C-,") 'beginning-of-buffer)
   (global-set-key (kbd "C-z C-.") 'end-of-buffer)

     ;;; straight to line
   (global-set-key (kbd "C-x C-j") 'goto-line)

     ;;; minibuffer
   (defalias 'yes-or-no-p 'y-or-n-p)

   ;; smooth scrolling
   (setq scroll-step 1)

   ;;; other window
   (global-set-key (kbd "<C-tab>") 'other-window)
   ;;; keep as fall-back combo for when CAPS+TAB is taken over by the minor mode
   (global-set-key (kbd "C-x C-x") 'other-window)
   (global-set-key (kbd "<C-M-tab>") (keybinding (other-window -1)))

     ;;; line truncation
   (global-set-key (kbd "C-x t") 'toggle-truncate-lines)

     ;;; killing and marking
   (global-set-key (kbd "C-x w") 'append-next-kill)

   ;;; fast buffer switch
   (global-set-key (kbd "C-x C-p") 'previous-buffer)
   (global-set-key (kbd "C-x C-n") 'next-buffer)

   (defun my:split-window-below-switch-point ()
     "Splits window and moves the point to save time"
     (interactive)
     (split-window-below)
     (other-window 1))
   (global-set-key (kbd "C-x C-y") 'my:split-window-below-switch-point)

   (defun my:split-window-right-switch-point ()
     "Splits window and moves the point to save time"
     (interactive)
     (split-window-horizontally)
     (other-window 1))
   (global-set-key (kbd "C-x y") 'my:split-window-right-switch-point)

   ;;; Shouldn't have to reach out long for this
   (global-set-key (kbd "C-x c") 'delete-other-windows)

   ;;; keyboard macros
   (global-set-key (kbd "C-x M-q") 'kbd-macro-query)

   ;;; frames
   (global-set-key (kbd "C-x o") 'other-frame)
   (global-set-key (kbd "C-x f") 'make-frame)

   ;;; screen size
   (global-set-key (kbd "C-z C-;") 'text-scale-decrease)
   (global-set-key (kbd "C-z C-'") 'text-scale-increase)

   ;; buffer list
   (global-set-key (kbd "C-x C-b") 'ibuffer)

   ;;; backups
   (setq backup-by-copying t
	 backup-directory-alist '(("." . "~/emacsbackups"))
	 delete-old-versions t
	 kept-new-versions 6
	 kept-old-versions 2
	 version-control t)

   ;;; winner mode configuration
   (winner-mode)
   (define-key winner-mode-map (kbd "C-z k") 'winner-undo)
   (define-key winner-mode-map (kbd "C-z j") 'winner-redo)

   ;;; Don't ask for confirmation before killing an unmodified buffer
   (defun volatile-kill-buffer ()
     "Kill current buffer unconditionally."
     (interactive)
     (let ((buffer-modified-p nil))
       (kill-buffer (current-buffer))))
   (global-set-key (kbd "C-x k") 'volatile-kill-buffer)

   ;; No ask to kill buffer
   (setq buffer-offer-save nil)

   ;;; narrowing
   (global-set-key (kbd "C-z n") 'narrow-or-widen-dwim)

   ;;; files
   (global-set-key (kbd "C-z l") 'load-file)
   ;;; filling
   (global-set-key (kbd "C-z C-f") 'fill-region)
   (global-set-key (kbd "C-z M-f") 'auto-fill-mode)

   ;;; dired
   (global-set-key (kbd "C-x C-d") 'wdired-change-to-wdired-mode)
   (global-set-key (kbd "M-\\")  (keybinding (dired default-directory)))
   (global-set-key (kbd "C-x /") (keybinding (dired "~/")))

   ;;; appearance
   (global-set-key (kbd "C-z M-l") 'load-theme)
   (load-theme 'deeper-blue t)
   ;; (set-frame-font "Hack-14" nil t)
   (set-frame-font "-CTDB-Fira Code-semibold-normal-normal-*-*-*-*-*-d-0-iso10646-1" nil t)

   ;;; shell
   (global-set-key (kbd "C-z ;") 'shell-command)
   (global-set-key (kbd "C-z |") 'shell-command-on-region)

   ;; undoing
   (global-set-key (kbd "C-;") 'undo)

   ;; open line
   (global-set-key (kbd "M-RET") 'open-line)

   ;;; marking
   (global-set-key (kbd "C-x x") 'exchange-point-and-mark)
   (global-set-key (kbd "C-M-g") 'mark-sexp)

   ;;; apropos
   (define-prefix-command 'Apropos-Prefix nil "Apropos (a,c,d,l,v,C-v)")
   (global-set-key (kbd "C-q C-a") 'Apropos-Prefix)
   (define-key Apropos-Prefix (kbd "a")   'apropos)
   (define-key Apropos-Prefix (kbd "C-a") 'apropos)
   (define-key Apropos-Prefix (kbd "c")   'apropos-command)
   (define-key Apropos-Prefix (kbd "d")   'apropos-documentation)
   (define-key Apropos-Prefix (kbd "l")   'apropos-library)
   (define-key Apropos-Prefix (kbd "v")   'apropos-variable)

   ;;; invisible sending
   (global-set-key (kbd "C-z C-M-s") 'send-invisible)

   ;;; going back to latest change
   (global-set-key (kbd "C-/") 'goto-last-change)

   ;; indentation
   (global-set-key (kbd "C-z i") 'indent-relative)
   (global-set-key (kbd "C-z C-i") 'indent-region)

   ;; searching and replacing
   (global-set-key (kbd "C-z C-s") 'isearch-forward-symbol-at-point)
   (global-set-key (kbd "C-z x") 'query-replace)
   (delete-selection-mode)   ;;; replace region with yank

   ;; print working dir
   (global-set-key (kbd "C-z w") 'pwd)

   (global-set-key (kbd "C-z C-b") 'switch-to-temporary-buffer)

   ;;; subword mode
   (global-set-key (kbd "C-x C-M-w") 'subword-mode)

   ;;; quick killing of spurious buffers
   (global-set-key (kbd "C-z 1") 'kill-buffer-other-window)
   (global-set-key (kbd "C-z 0") 'kill-buffer-and-window)

   ;;; filtering
   (global-set-key (kbd "C-z C-M-k") 'keep-lines)
   (global-set-key (kbd "C-z C-M-o") 'flush-lines)
 #+END_SRC
** packages
#+BEGIN_SRC emacs-lisp
  (use-package dash :ensure t)
  (use-package diminish :ensure t)
#+END_SRC
** secrets
#+BEGIN_SRC emacs-lisp
(load-file "~/dropenc/secrets.el")
#+END_SRC
* motion
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("C-z C-g" . avy-goto-word-1)
    ("C-z g" . avy-goto-char-2))
#+END_SRC
* buffers
#+BEGIN_SRC emacs-lisp
(defun my:copy-buffer-name ()
  (interactive)
  (kill-new (buffer-name)))
(global-set-key (kbd "C-z C-M-n") 'my:copy-buffer-name)

(defun my:copy-buffer-name-and-line ()
  (interactive)
  (let ((bufnameline (format "%s:%s" (buffer-name) (line-number-at-pos))))
    (kill-new bufnameline)))
(global-set-key (kbd "C-z C-M-l") 'my:copy-buffer-name-and-line)
#+END_SRC
* fixit
#+BEGIN_SRC emacs-lisp
(defun my:upcase-previous-word-thing ()
  "Upcases the previous word-thingy"
  (interactive)
  (mark-a-word-or-thing nil)
  (upcase-region (region-beginning) (region-end))
  (forward-word 1))

(global-set-key (kbd "C-z C-u") 'my:upcase-previous-word-thing)

#+END_SRC
* search
** iedit
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t
    :bind
    (("C-M-;" . iedit-mode)
    :map iedit-mode-keymap
    ("M-<tab>" . iedit-prev-occurrence)))
#+END_SRC
** anzu
#+BEGIN_SRC emacs-lisp
(use-package anzu
  :ensure t ;; install package if not found OR: (setq use-package-always-ensure t)
  :diminish anzu-mode
  :config
  (global-anzu-mode +1)
)
#+END_SRC
* windows
** speedbar
 #+BEGIN_SRC emacs-lisp
   (use-package sr-speedbar
     :ensure t)
 #+END_SRC
** iresize
#+BEGIN_SRC emacs-lisp
  (use-package iresize
    :load-path "./elisp"
    :pin manual
    :bind
    (("C-z r" . iresize-mode)))
#+END_SRC
** ace
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind
    ("M-o" . ace-window)
    :custom
     aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
#+END_SRC
* input
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-\\") 'toggle-input-method)
#+END_SRC
* helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :after (helm-config)
    :requires helm-config
    :diminish helm-mode
    :preface
    (require 'helm-config)
    :bind
    (("C-l" . helm-command-prefix)
     ;; This is bad, in case you're using an input method and can't type latin characters
     ;; ([remap execute-extended-command] . helm-M-x)
     ([remap find-file] . helm-find-files)
     ([remap switch-to-buffer] . helm-buffers-list)
     ("C-o" . helm-M-x)
     ("C-z C-e" . helm-M-x)
     ("C-z a" . helm-mark-ring)
     ("C-z C-a" . helm-global-mark-ring)
     ("C-z y" . helm-show-kill-ring)
     ("C-x a" . helm-mini)
     ("C-\\" . helm-buffers-list)
     :map helm-command-map
     ("g" . helm-ag)
     ("C-g" . helm-do-grep-ag)
     ("M-p" . helm-package)
     ("u" . helm-unicode)
     ("o" . helm-occur)
     ("d" . swiper)
     ("n" . helm-register)
     ("v" . helm-bookmarks)
     ("TAB" . helm-imenu)
     :map helm-map
     ("C-w" . backward-kill-word)
     ("C-h" . backward-delete-char)
     ("C-z C-," . helm-beginning-of-buffer)
     ("C-z C-." . helm-end-of-buffer))
    :config
    (global-unset-key (kbd "C-x c"))
    (global-set-key (kbd "C-x c") 'delete-other-windows)
    :hook
    (after-init . helm-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package helm-gtags
    :ensure t
    :hook
    (dired-mode . helm-gtags-mode)
    (eshell-mode . helm-gtags-mode)
    (c-mode . helm-gtags-mode)
    (c++-mode . helm-gtags-mode)
    (asm-mode . helm-gtags-mode)
    :bind
    (:map helm-gtags-mode-map
	  ("M-." . helm-gtags-dwim)
	  ("M-," . helm-gtags-pop-stack)
	  ("C-c g a" . helm-gtags-tags-in-this-function)
	  ("C-c C-i" . helm-gtags-select)
	  ("M-." . helm-gtags-dwim)
	  ("M-," . helm-gtags-pop-stack)
	  ("C-c <" . helm-gtags-previous-history)
	  ("C-c >" . helm-gtags-next-history)
	  ("C-c g w" . helm-gtags-clear-stack)
	  ("C-c g r" . helm-gtags-find-rtag)
	  ("C-c g s" . helm-gtags-find-symbol)
	  ("C-c g f" . helm-gtags-parse-file)
	  ("C-c g o" . helm-gtags-find-tag-other-window)
	  ("C-c g C-s" . helm-gtags-show-stack)
	  ("C-c g u" . helm-gtags-update-tags)
	  ("C-c g C-g" . ggtags-mode)
	  ("C-z C-r" . helm-gtags-find-rtag)
	  ("C-z M-u" . helm-gtags-find-tag-other-window))
    :config
    (defadvice helm-gtags-dwim (before helm-gtags-widen activate)
      (progn (if (buffer-narrowed-p) (widen))))
    (defadvice helm-gtags-pop-stack (before helm-gtags-widen activate)
      (progn (if (buffer-narrowed-p) (widen))))
    :custom
    (helm-gtags-ignore-case t)
    (helm-gtags-auto-update t)
    (helm-gtags-use-input-at-cursor t)
    (helm-gtags-pulse-at-cursor t)
    (helm-gtags-prefix-key "\C-cg")
    (helm-gtags-suggested-key-mapping t))

  (use-package helm-rg
    :ensure t
    :bind (("C-x C-g" . helm-rg)))


  (use-package helm-swoop
    :commands (helm-swoop helm-multi-swoop)
    :ensure t
    :after (helm)
    :bind
    (:map helm-command-map
	  ("w" . helm-swoop)
	  ("C-w" . helm-multi-swoop)
	  :map helm-swoop-map
	  ("C-w" . backward-kill-word)))

  (use-package helm-cscope
    :ensure t
    :after (helm)
    :bind
    (:map helm-cscope-mode-map
	  ("M-." . helm-cscope-find-this-symbol-no-prompt)
	  ("M-," . helm-cscope-pop-mark)
	  ("C-c e" . helm-cscope-find-calling-this-function-no-prompt)))
#+END_SRC
* marking
#+BEGIN_SRC emacs-lisp
    (use-package thing-cmds
      :ensure t
      :config
      (defun mark-a-word-or-thing (arg)
	"Select word on or before current point, and move point to beginning of word.

      With a prefix ARG, first prompts for type of things and select ARG things
      but you need to move the point to the beginnig of thing first.

      But if a thing has been selected, then extend the selection by one thing
      on the other side of the point.
      (So to select backwards, select to the right first.)"
	(interactive "P")
	(if (or arg mark-active)
	    (call-interactively 'mark-thing)
	  (skip-syntax-backward "w_")
	  (mark-thing 'symbol)))
      :bind
      ("C-M-w" . mark-a-word-or-thing))
#+END_SRC
* org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :preface
    (require 'org-agenda)
    :init
    (progn
      (define-prefix-command 'org-prefix nil "Org: a(agenda), j(clock), c(capture), d(dired)"))
    :mode ("\\.org" . org-mode)
    :bind-keymap
    ("C-z o" . org-prefix)
    :bind
    (("C-z J" . org-clock-goto)
     :map org-mode-map
     ("<s-stab>" . org-global-cycle)
     ("C-c l" . org-store-link)
     ("C-c c" . org-capture)
     ("C-c ." . org-priority)
     ("C-c i" . org-iswitchb)
     ("C-c t" . org-time-stamp)
     ("C-c f" . org-metaright)
     ("C-c b" . org-metaleft)
     ("C-c M-n" . org-metadown)
     ("C-c M-p" . org-metaup)
     ("C-c '" . org-insert-todo-heading)
     ("M-p" . org-table-previous-field)
     ("M-n" . org-table-next-field)
     ("<C-tab>" . other-window)
     ("C-c s" . org-insert-todo-subheading)
     ("C-c C-," . org-promote-subtree)
     ("C-c C-." . org-demote-subtree)
     ("C-c e" . org-edit-src-code)
     ("C-c a" . org-archive-subtree)
     ("C-," . nil)
     ("C-c n" . org-cycle-agenda-files)
     ("C-c q" . (lambda () (interactive) (insert "|")))
     ("C-c w" . (lambda () (interactive) (insert "|-")))
     ("C-c k" . (lambda () (interactive) (insert "- [ ] " )))
     ("C-c u" . (lambda () (interactive) (insert "*")))
     :map org-agenda-mode-map
     ("C-c m" . org-agenda-month-view)
     ("C-c y" . org-agenda-year-view)
     :map org-src-mode-map
     ("C-c C-k" . nil)
     ("C-c e" . org-edit-src-exit)
     ("C-c k" . org-edit-src-abort)
     ("C-c e" . org-edit-src-exit)
     :map org-prefix
     ("a" . org-agenda)
     ("c" . org-capture)
     ("j" . org-clock-goto)
     ("d" . (lambda () (interactive) (dired "~/org"))))
    :custom
    (org-directory "~/org/")
    (org-log-done 'time)
    (org-default-notes-file "~/org/remember.org")
    (org-capture-templates '(
			     ("t" "Todo" entry (file+headline
						"" "Tasks") "* TODO %?\n %i %T\n")
			     ("e" "Emacs" entry (file
						 "~/org/emacs.org") "* TODO %?\n %i %T\n")
			     ("p" "Programming" entry (file+headline
						       "" "Programming") "* TODO %?\n %i")
			     ("r" "Reads" entry (file+headline
						 "" "Reads") "* TODO %?\n %i %T\n")
			     ("w" "Workflow" entry (file+headline
						    "" "Workflow") "* TODO %?\n %i %T\n")
			     ("l" "Learn" entry (file+headline
						       "" "Learn") "* TODO %?\n %i")
			     ("j" "Journal" entry (file+datetree
						   "~/org/journal.org") "* TODO %?\n")

			     ("c" "Chinese" entry (file "~/org/projects/languages/chinwords.org")
			      "* %?\n Pinyin: \n Meaning: ")

			     ("b" "Bookmark" entry (file "~/org/bookmarks.org")
			      "* %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n" :empty-lines 1)
			     ))
    (org-clock-persist 'history)
    (org-deadline-warning-days 0)
    :config
    (org-clock-persistence-insinuate))

#+END_SRC
* projectile
https://github.com/bbatsov/projectile

#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :ensure t)

  (use-package projectile
    :ensure t
    :diminish (projectile-mode projectile-global-mode)
    :init
    (progn
      (require 'helm-projectile)
      (setq projectile-cache-file (concat user-emacs-directory "projectile-cache"))
      (setq projectile-known-projects-file (concat user-emacs-directory "projectile-bookmarks"))
      (require 'recentf)
      (setq recentf-save-file (concat user-emacs-directory "recentfiles"))
      (recentf-mode))

    :hook
    (after-init . projectile-global-mode)

    :config
    (helm-projectile-on)
    (projectile-global-mode)

    (defun my:projectile-grep-in-buffer-ext ()
      (interactive)
      (setq current-prefix-arg '(4))
      (call-interactively 'projectile-grep))

    (defun my:projectile-grep-buffer-name (args)
      (interactive "P")
      (projectile-grep (buffer-name)))

    :bind-keymap
    ("C-c p" . projectile-command-map)

    :bind
    (("C-z p" . helm-projectile-switch-project)
     ("C-z e" . helm-projectile-recentf)
     ("C-z f" . helm-projectile-find-file)
     ("C-z t" . projectile-dired)
     :map projectile-command-map
	  ("C-g" . projectile-grep)
	  ("s r" . projectile-ripgrep)
	  ("s C-r" . rgrep)
	  ("n" . my:projectile-grep-buffer-name)
	  ("C-r" . my:projectile-grep-in-buffer-ext))

    :custom
    (projectile-completion-system 'helm)
    (projectile-indexing-method 'alien)
    (projectile-switch-project-action 'projectile-dired)
    (projectile-sort-order 'recently-active)
    (projectile-enable-caching t))
#+END_SRC
* completion
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish (company-mode global-company-mode)
    :init
    (global-company-mode)
    :hook
    (after-init . global-company-mode)
    (program-mode . company-mode)
    :bind
    (("C-z c" . company-complete)
     ("C-z C-M-f" . company-files)
     :map
     company-active-map
     ("C-w" . backward-kill-word)
     ("C-h" . delete-backward-char)
     ("C-q" . company-show-doc-buffer)
     ("C-l" . company-show-location)
     ("C-n" . company-select-next)
     ("C-p" . company-select-previous))
    :custom
    (company-require-match nil)
    (company-tooltip-align-annotations t)
    (company-require-match 'never)
    ;; add frontends
    )
#+END_SRC

** yasnippet
#+BEGIN_SRC  emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode yas-global-mode
    :init
    (progn
      (use-package yasnippet-snippets))
    :hook
    ((prog-mode . yas-minor-mode)
     (org-mode . yas-minor-mode))
    :custom
    ;; (yas-snippet-dirs (concat (car (file-expand-wildcards (concat package-user-dir "/yasnippet-snippets*")))  "/snippets"))
    (yas-verbosity 2)
    :config
    (yas-load-directory (concat (car (file-expand-wildcards (concat package-user-dir "/yasnippet-snippets*")))  "/snippets"))
    (yas-reload-all))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package helm-c-yasnippet
    :ensure t
    :init
    (require 'yasnippet)
    :bind
    (("C-z C-y" . helm-yas-complete)))
#+END_SRC

** counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("C-q v" . counsel-describe-variable)
     ("C-q f" . counsel-describe-function)
     ("C-,"   . counsel-M-x)
     ("C-x d" . counsel-dired)))
#+END_SRC
* version control
** vc
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC
** diffing
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :ensure t
    :init
    (defun my:before-ediff ()
      (window-configuration-to-register 'p))
    (defun my:after-ediff ()
      (jump-to-register 'p))
    :hook
    (ediff-load-hook . my:before-ediff)
    (ediff-quit-hook . ediff-cleanup-mess)
    (ediff-quit-hook . my:after-ediff)
    :custom
    (ediff-window-setup-function 'ediff-setup-windows-plain)
    (ediff-split-window-function 'split-window-horizontally)
    :bind
    ("C-z d" . vc-ediff)
    ("C-z C-d" . ediff)
    ("C-z b" . ediff-buffers))
#+END_SRC
** magit
#+begin_src emacs-lisp
  (use-package p4
    :init
    (setq p4-global-key-prefix "v"))
#+end_src

 #+BEGIN_SRC emacs-lisp
   (use-package magit
     :ensure t
     :bind (("C-z m"   . magit-status)
	    ("C-z M-d" . magit-dispatch)
	    ("C-x g" . nil)
	    :map magit-mode-map
	    ("C-c c"   . magit-ediff-compare)
	    ("C"   . magit-checkout)
	    (";"   . magit-dispatch-popup))
     :config (progn
	       (magit-define-popup-action 'magit-ediff-popup ?S "Show staged" 'magit-ediff-show-staged)
	       (magit-define-popup-action 'magit-ediff-popup ?U "Show unstaged" 'magit-ediff-show-unstaged)))
 #+END_SRC
** diff-hl
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :ensure t
    :bind
    (("C-z C-M-h" . diff-hl-mode)
     :map diff-hl-mode-map
     ("C-x v C-n" . diff-hl-next-hunk)
     ("C-x v C-p" . diff-hl-previous-hunk))
    )
#+END_SRC
** undoing
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    (global-undo-tree-mode t)
    :bind
    (("C-z u" . undo-tree-mode)
     :map undo-tree-map
     ("C-;" . nil)
     ("C-/" . nil)))
#+END_SRC
* programming
** compilation
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-z C-c") 'compile)
  (global-set-key (kbd "C-z C-M-c") (keybinding (switch-to-buffer "*compilation*")))
#+END_SRC
** syntax checking
#+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :bind
      ( "C-z w" . flycheck-mode))
#+END_SRC
** hideif
#+BEGIN_SRC emacs-lisp
  (use-package hideif
    :ensure t
    :bind-keymap
    ( "C-c C-f" . hide-ifdef-mode-submap))
#+END_SRC
** hideshow
#+BEGIN_SRC emacs-lisp
  (use-package hideshow
    :ensure t
    :pin manual
    :bind
    (:map hs-minor-mode-map
	  ("C-c f C-h" . hs-hide-block)
	  ("C-c f C-s" . hs-show-block)
	  ("C-c f C-M-h" . hs-hide-all)
	  ("C-c f C-M-s" . hs-show-all)
	  ("C-c f C-l" . hs-hide-level)
	  ("C-c f C-c" . hs-toggle-hiding)
	  ("C-c f C-a" . hs-show-all)
	  ("C-c f C-t" . hs-hide-all)
	  ("C-c f C-d" . hs-hide-block)
	  ("C-c f C-e" . hs-toggle-hiding)))
#+END_SRC
** gdb
** tagging
*** etags
#+BEGIN_SRC emacs-lisp
  (use-package counsel-etags
    :ensure t
    :bind
    (:map emacs-lisp-mode-map
          ("C-c C-," . counsel-etags-find-tag-at-point)))
#+END_SRC
** debugging
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'gdb)
#+END_SRC
* languages
** elisp
https://www.reddit.com/r/emacs/comments/54pvg4/usepackage_with_builtin_modes/

- [ ] send region to ielm 
https://caiorss.github.io/Emacs-Elisp-Programming/Elisp_Snippets.html

 #+BEGIN_SRC emacs-lisp
   (use-package elisp-mode
     :load-path "/home/adrianlarumbe/usr/src/emacs/emacs-26.2/lisp/progmodes"
     :after (company yasnippet)
     :hook
     (emacs-lisp-mode . linum-mode)
     (emacs-lisp-mode . hl-line-mode)
     (emacs-lisp-mode . company-mode)
     (emacs-lisp-mode . yas-minor-mode)
     (emacs-lisp-mode . hs-minor-mode)
     (emacs-lisp-mode . rainbow-delimiters-mode)
     (emacs-lisp-mode . diff-hl-mode)
     (emacs-lisp-mode . superword-mode)
     (emacs-lisp-mode . eldoc-mode)
     (emacs-lisp-mode . flycheck-mode)
     (emacs-lisp-mode . elisp-slime-nav-mode)
     (emacs-lisp-mode . paredit-mode)
     :bind
     (("C-z C-v" . eval-expression)
      :map emacs-lisp-mode-map
      ("C-c i" . imenu)
      ("C-c b" . speedbar)
      ("C-c C-r" . eval-region)
      ("C-c C-b" . eval-buffer)
      ("C-c C-e" . ielm)
      ("C-c <tab>" . company-complete)
      ("C-c f" . company-files)
      ("C-c C-y" . helm-yas-complete)
      ("C-z M-y" . yas/exit-all-snippets)
      ("C-M-," . mark-sexp)
      ("C-c s" . mark-sexp)
      ("C-c C-." . helm-etags-select)
      ("C-c C-f f" . flycheck-mode)
      ("C-C C-h" . (lambda nil (interactive) (insert "-")))
      ("C-C C-l" . (lambda nil (interactive) (insert "'")))
      ("C-C C-;" . (lambda nil (interactive) (insert ":")))))
 #+END_SRC

*** ielm
#+BEGIN_SRC emacs-lisp
  (use-package ielm
    :ensure t
    :init
    (defun ielm/send-region ()
      (interactive)
      (let ((text (buffer-substring-no-properties (region-beginning)
						  (region-end))))
	(with-current-buffer "*ielm*"
	  (insert text)
	  (ielm-send-input))))
    :bind
    (:map emacs-lisp-mode-map)
    ("C-c C-c" . ielm/send-region))

#+END_SRC
*** slime
#+BEGIN_SRC emacs-lisp
  (use-package elisp-slime-nav
    :ensure t)
#+END_SRC
*** debugging

debug
debug-on-entry
toggle-debug-on-error
toggle-debug-on-quit
edebug-defun

- [ ] https://www.gnu.org/software/emacs/manual/html_node/eintr/Debugging.html
- [ ] https://www.math.utah.edu/docs/info/emacs-lisp-intro_18.html
** cc

Alternatives with irony mode
- [ ] https://www.seas.upenn.edu/~chaoliu/2017/09/01/c-cpp-programming-in-emacs/
- [ ] http://gesangvollcy.com/2019/01/24/Emacs-irony-mode/
- [ ] https://trivialfis.github.io/emacs/2017/08/02/C-C++-Development-Environment-on-Emacs.html
- [ ] https://github.com/Sarcasm/irony-mode

#+BEGIN_SRC emacs-lisp
  (use-package company-c-headers
    :ensure t)

  (use-package cc-mode
    :ensure t
    :init
    (require 'semantic)
    (defun my:stop-flycheck ()
      (flycheck-mode -1)
      )
    (remove-hook 'c-mode-hook 'flycheck-mode)
    (add-hook 'c-mode-common-hook 'my:stop-flycheck)
    (add-hook 'c-mode-hook 'my:stop-flycheck)
    (defun my:goto-defun-name ()
      "Jumps to function name in C"
      (interactive)
      (c-beginning-of-defun)
      (search-forward "(")
      (backward-word))
    (use-package c-eldoc
      :ensure t)
    :commands (c-mode c++-mode)
    :hook
    (c-mode . linum-mode)
    (c-mode . hl-line-mode)
    (c-mode . company-mode)
    (c-mode . yas-minor-mode)
    (c-mode . hs-minor-mode)
    (c-mode . rainbow-delimiters-mode)
    (c-mode . diff-hl-mode)
    (c-mode . superword-mode)
    (c-mode . helm-gtags-mode)
    (c-mode . hide-ifdef-mode)
    (c++-mode . linum-mode)
    (c++-mode . hl-line-mode)
    (c++-mode . company-mode)
    (c++-mode . yas-minor-mode)
    (c++-mode . hs-minor-mode)
    (c++-mode . rainbow-delimiters-mode)
    (c++-mode . diff-hl-mode)
    (c++-mode . superword-mode)
    (c++-mode . helm-gtags-mode)
    (c++-mode . hide-ifdef-mode)

    :bind
    (:map c-mode-base-map
	  ("C-c q" . semantic-ia-show-summary)
	  ( "C-c w" . semantic-ia-fast-jump)
	  ( "C-c e" . semantic-ia-show-doc)
	  ( "C-c C-r" . semantic-add-system-include)
	  ( "C-c t". semantic-c-add-preprocessor-symbol)
	  ( "M-<tab>" . moo-complete)
	  ("C-'" . swiper)
	  ("C-c <tab>" . company-gtags)
	  ("C-c C-h" . company-c-headers)
	  ("C-c C-m" . company-semantic)
	  ("C-c C-." . helm-gtags-dwim)
	  ("C-c C-," . helm-gtags-pop-stack)
	  ("C-c C-c" . compile)
	  ("C-c C-g" . gdb)
	  ("C-c C-k" . ff-find-other-file)
	  ("C-c d" . mark-defun)
	  ("C-c i" . (lambda () (interactive)
	      (end-of-line)
	      (insert ";")))
	  ("C-c ;" . (lambda () (interactive)
	      (end-of-line)
	      (insert ";")
	      (newline-and-indent)))
	  ("C-c o" . (lambda () (interactive)
	      (insert " = ")))
	  ("C-c u" . (lambda () (interactive)
	      (insert "_")))
	  ("C-c j" . (lambda () (interactive)
	      (insert "->")))
	  ("C-c [" . (lambda () (interactive)
	      (insert "#")))
	  ("C-c k" . (lambda () (interactive)
	      (insert "&")))
	  ("C-c l" . (lambda () (interactive)
	      (insert "*")))
	  ("C-c ' " . (lambda () (interactive)
			(insert "%")))
	  ("C-c y" . yas/expand)
	  ("C-c C-y" . helm-yas-complete)
	  ("C-c C-a" . hs-hide-block)
	  ("C-c C-s" . hs-show-block)
	  ("C-c a" . hs-hide-level)
	  ("C-c s" . hs-show-all)
	  ("C-c x" . info-lookup-symbol)
	  ("C-c m" . back-to-indentation)
	  ("C-c z" . indent-region)
	  ("C-c b" . sr-speedbar-toggle)
	  ("C-c n" . c-set-style)
	  ("C-c h" . my:goto-defun-name)
	  ("C-c C-j " . (lambda () (interactive)
			  (paredit-open-round)))
	  ("C-c v" . magit-dispatch)
	  ("C-c C-v" . magit-file-dispatch)
	  )
    :config
    (global-semanticdb-minor-mode 1)
    (global-semantic-idle-scheduler-mode 1)
    (global-semantic-stickyfunc-mode 1)
    (global-semantic-decoration-mode 1)
    (semantic-mode 1)
    (add-to-list 'company-backends 'company-c-headers)
    (flycheck-mode -1)

    :custom
    (c-basic-offset 8)
    (tab-width 8)
    (indent-tabs-mode t)
    )

  (use-package eglot
    :ensure t
    :bind
    (:map eglot-mode-map
	  ("C-M-/" . xref-find-references)))

#+END_SRC
** makefile
#+BEGIN_SRC emacs-lisp
  (use-package make-mode
    :load-path "/usr/share/emacs/26.2/lisp/progmodes"
    :hook
    (makefile-mode . linum-mode)
    (makefile-mode . hl-line-mode)
    (makefile-mode . company-mode)
    (makefile-mode . yas-minor-mode)
    (makefile-mode . hs-minor-mode)
    (makefile-mode . rainbow-delimiters-mode)
    (makefile-mode . diff-hl-mode)
    (makefile-mode . superword-mode)
    (makefile-mode . helm-gtags-mode)
    (makefile-mode . hide-ifdef-mode)
    :bind
    (:map makefile-mode-map
	  ("C-c q" . semantic-ia-show-summary)
	  ( "C-c w" . semantic-ia-fast-jump)
	  ( "C-c e" . semantic-ia-show-doc)
	  ( "C-c C-r" . semantic-add-system-include)
	  ( "C-c t". semantic-c-add-preprocessor-symbol)
	  ("C-c k" . (lambda nil (interactive) (insert "$")))
	  ("C-c o" . (lambda nil (interactive) (insert "=")))
	  ("C-c i" . (lambda nil (interactive) (insert ":=")))
	  ("C-c u" . (lambda nil (interactive) (insert "_")))))
#+END_SRC
** shell
#+BEGIN_SRC emacs-lisp
  (use-package sh-script
    :ensure t
    :init
    (use-package flymake-shellcheck
      :commands flymake-shellcheck-load
      :init
      (add-hook 'sh-mode-hook 'flymake-shellcheck-load))
    (use-package company-shell)
    :hook
    (sh-mode . linum-mode)
    (sh-mode . yas-minor-mode)
    (sh-mode . hl-line-mode)
    (sh-mode . diff-hl-mode)
    (sh-mode . company-mode)
    (sh-mode . rainbow-delimiters-mode)
    (sh-mode . flycheck-mode)
    :init
    (progn
      (add-to-list 'company-backends 'company-shell))
    :bind
    (:map sh-mode-map
	  ("C-c f" . flymake-goto-next-error)
	  ("C-c b" . flymake-goto-prev-error)
	  ("C-c r" . sh-execute-region)
	  ("C-c s" . sh-send-line-or-region)
	  ("M-." . xref-find-definitions)
	  ("C-c o" . (lambda () (interactive) (insert "=")))
	  ("C-c u" . (lambda () (interactive)(insert "_")))
	  ("C-c k" . (lambda () (interactive) (insert "$")))
	  ("C-c C-k" . (lambda () (interactive) (insert " ")(backward-char)))
	  ("C-c i" . info-lookup-symbol)))

#+END_SRC
** python
- [ ] https://github.com/howardabrams/dot-files/blob/master/emacs-python.org
- [ ] https://docs.python-guide.org/

#+BEGIN_SRC emacs-lisp
  (use-package pyenv-mode
    :ensure t
    :config
    (defun projectile-pyenv-mode-set ()
      "Set pyenv version matching project name."
      (let ((project (projectile-project-name)))
	(if (member project (pyenv-mode-versions))
	    (pyenv-mode-set project)
	  (pyenv-mode-unset))))

    (add-hook 'projectile-switch-project-hook 'projectile-pyenv-mode-set)
    (add-hook 'python-mode-hook 'pyenv-mode))

  (use-package pyenv-mode-auto
    :ensure t)

  (use-package python
    :mode ("\\.py\\'" . python-mode)
    ("\\.wsgi$" . python-mode)
    ;; :interpreter ("python" . python-mode)
    :init
    (progn
      (use-package company-jedi
	:ensure t)
      (use-package highlight-indentation
	:ensure t)
      (setq-default indent-tabs-mode nil))
    :bind
    (("C-z C-M-r" . run-python)
     ("C-z M-r" . python-shell-switch-to-shell)
     :map python-mode-map
     ("C-c i" . info-lookup-symbol)
     ("C-c j" . (lambda () (interactive) (insert " = ")))
     ("C-c k" . (lambda () (interactive) (insert "_")))
     ("C-c f" . flycheck-next-error)
     ("C-c b" . flycheck-previous-error)
     ("C-c q" . flycheck-mode)
     ("C-c d" . jedi:show-doc)
     ("C-c c" . company-jedi)
     ("C-c g" . elpy-config)
     ("M-," . pop-tag-mark)
     ("C-c M-n" . elpy-nav-indent-shift-right)
     ("C-c M-p" . elpy-nav-indent-shift-left)
     ("C-c C-y" . helm-yas-complete)
     ("C-z h d" . helm-pydoc)
     ("C-c e" . helm-cscope-find-calling-this-function)
     ("C-c w" . helm-cscope-pop-mark)
     ("C-c m" . elpy-shell-send-current-statement)
     ("C-c s" . sr-speedbar-toggle)
     ("C-c C-." . jedi:goto-definition)
     ("C-c C-," . jedi:goto-definition-pop-marker)
     ("C-c i" . (lambda () (interactive) (end-of-line) (insert ":")))
     ("C-c o" . (lambda () (interactive)(insert " = ")))
     ;; :map inferior-python-mode-map
     ;; ("C-c o" . (lambda () (interactive)(insert " = ")))
     )
    :hook
    (python-mode . linum-mode)
    (python-mode . which-function-mode)
    (python-mode . diff-hl-mode)
    (python-mode . helm-cscope-mode)
    (python-mode . highlight-indentation-mode)
    (python-mode . hs-minor-mode)
    (python-mode . flycheck-mode)
    (python-mode . jedi:setup)
    :custom
    (python-shell-interpreter "python3")
    ;; (python-shell-interpreter "/usr/bin/ipython3")
    ;; (python-shell-interpreter-args "-i --simple-promtp")

    (jedi:complete-on-adot t))


    :config
    (setq python-indent-offset 4)
    ;; (add-hook 'python-mode-hook 'smartparens-mode)
    ;; (add-hook 'python-mode-hook 'color-identifiers-mode)


  (use-package jedi
    :ensure t
    :init
    (add-to-list 'company-backends 'company-jedi)
    :config
    (use-package company-jedi
      :ensure t
      :init
      (add-hook 'python-mode-hook (lambda () (add-to-list 'company-backends 'company-jedi)))
      (setq company-jedi-python-bin "python")))

  (use-package elpy
    :ensure t
    :commands elpy-enable
    :init (with-eval-after-load 'python (elpy-enable))

    :config
    (electric-indent-local-mode -1)
    (delete 'elpy-module-highlight-indentation elpy-modules)
    (delete 'elpy-module-flymake elpy-modules)

    (defun ha/elpy-goto-definition ()
      (interactive)
      (condition-case err
	  (elpy-goto-definition)
	('error (xref-find-definitions (symbol-name (symbol-at-point))))))

    :bind (:map elpy-mode-map ([remap elpy-goto-definition] .
			       ha/elpy-goto-definition)))
#+END_SRC
** rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :init
    (use-package racer
      :ensure t
      :hook
      (racer-mode . eldoc-mode)
      (racer-mode . company-mode))
    (use-package company-racer
      :ensure t
      :bind
      (:map rust-mode-map
	    ("C-c c" . company-racer)))
    (use-package flycheck-rust
      :ensure t
      :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
    (use-package cargo
      :ensure t)
    :hook
    (rust-mode . racer-mode)
    (rust-mode . linum-mode)
    (rust-mode . which-function-mode)
    (rust-mode . hl-line-mode)
    (rust-mode . company-mode)
    (rust-mode . yas-minor-mode)
    (rust-mode . flycheck-mode)
    (rust-mode . rainbow-delimiters-mode)
    (rust-mode . diff-hl-mode)
    (rust-mode . superword-mode)
    (rust-mode . cargo-minor-mode)
    (rust-mode . racer-mode)
    :bind
    (:map rust-mode-map
	  ("C-c y" . yas/expand)
	  ("C-c C-y" . helm-yas-complete)
	  ("C-c M-y" . yas/exit-all-snippets)
	  ("C-c i" . (lambda () (interactive) (end-of-line) (insert ";")))
	  ("C-c ;" . (lambda () (interactive) (end-of-line) (insert ";") (newline-and-indent)))
	  ("C-c o" . (lambda () (interactive) (insert " = ")))
	  ("C-c u" . (lambda () (interactive) (insert "_")))
	  ("C-c [" . (lambda () (interactive) (insert "->")))
	  ("C-c k" . (lambda () (interactive) (insert "&")))))


#+END_SRC
* appearance
** theme
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t)
  (use-package monokai-theme
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(load-theme 'monokai t)
#+END_SRC
** modeline
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :init
    (require 'powerline)
    (powerline-default-theme))

#+END_SRC
** parens
#+BEGIN_SRC emacs-lisp
    (use-package paredit
      :ensure t
      :bind
      (:map emacs-lisp-mode-map
	    ("C-c C-j" . paredit-open-round)
	    ("C-c C-k" . paredit-close-round)
	    ("C-C C-'" . paredit-doublequote)))

    (use-package rainbow-delimiters
      :ensure t)
#+END_SRC   
** hl line
#+BEGIN_SRC emacs-lisp
  (use-package hl-line
    :ensure t
    :custom
    (hl-line-sticky-flag t))
#+END_SRC
* convenience
** scratch buffers 
#+BEGIN_SRC emacs-lisp
  (use-package scratch
    :ensure t
    :bind
    ("C-z C-b" . scratch))
#+END_SRC
** sudo
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind
    ("C-x C-M-u" . sudo-edit))
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config ;; executed after loading package
    (which-key-mode))
#+END_SRC
** pass
#+BEGIN_SRC emacs-lisp
  (use-package password-store
    :ensure t)
#+END_SRC
* programs
** browser
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-z C-o") 'browse-url)
#+END_SRC

** shell
** evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :bind
    ("M-SPC" . evil-mode))

#+END_SRC
** google
#+BEGIN_SRC emacs-lisp
  (use-package google-this
    :ensure t
    :init
    (define-prefix-command 'google-search nil "Google search: g (Google this), l (Lucky search)")
    :bind
    (("C-z q" . google-search)
     :map google-search
      ("g" . google-this)
      ("l" . google-this-lucky-search)))
#+END_SRC
** dired
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :load-path "/usr/share/emacs/26.2/lisp"
    :bind
    (:map dired-mode-map
	  ("C-o" . nil)
	  ("C-c C-o" . dired-display-file)
	  ("C-c C-u" . dired-up-directory)))
#+END_SRC
** rss
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :config
    :bind
    ("C-z C-r" . elfeed)
    :custom
    (elfeed-use-curl t)
    (elfeed-curl-extra-arguments '("--insecure"))
    (elfeed-db-directory "~/dropenc/elfeeddb"))

  (use-package elfeed-org
    :ensure t
    :after (elfeed)
    :demand
    :config
    (elfeed-org)
    :custom
    (rmh-elfeed-org-files (list "~/org/elfeed.org")))

  (use-package elfeed-protocol
    :ensure t
    :after (elfeed elfeed-org)
    :demand
    :config
    (setq elfeed-protocol-owncloud-maxsize 1000)
    (setq elfeed-protocol-owncloud-update-with-modified-time t)
    (elfeed-protocol-enable)
    (defadvice elfeed (after configure-elfeed-feeds activate)
      "Make elfeed-org autotags rules works with elfeed-protocol."
      (setq elfeed-protocol-tags elfeed-feeds)
      (setq elfeed-feeds (list
			  (list (format "owncloud+https://%s@cloud.disroot.org" disroot-username)
				:password '(password-store-get disroot-password))))
      (setq elfeed-feeds (append elfeed-feeds elfeed-protocol-tags))))

#+END_SRC
* server
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC

* crap
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x j") 'ripgrep-regexp)


(defun my:goto-defun-name ()
  "Jumps to function name in C"
  (interactive)
  (c-beginning-of-defun)
  (search-forward "(")
  (backward-word))

(define-key c-mode-map (kbd "C-c h")  'my:goto-defun-name)
#+END_SRC
